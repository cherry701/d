#include<stdio.h>
#define MAX 9999
int i, j, k, a, b, u, v, n, ne = 1;
int min, min_cost = 0, adj[30][30], parent[25];
int find(int i)
{
while(parent[i])
{
i = parent[i];
}
return i;
}
int uni(int i, int j)
{
if(i != j)
{
parent[j] = i;
return 1;
}
return 0;
}
void Find_Kruskal()
{
while(ne < n)
{
for(i = 1, min = MAX ; i <= n ; i++)
{
for(j = 1 ; j <= n ; j++)
{
if(adj[i][j] < min)
{
min = adj[i][j];
a = u = i;
b = v = j;
}
}
}
u = find(u);
v = find(v);
if(uni(u, v))
{
printf("\n(%d, %d) = %d ", a, b, min);
min_cost += min;
ne++;
}
adj[a][b] = adj[b][a] = MAX;
}
printf("\nMinimum Cost = %d ", min_cost);
}
void main()
{
printf("\nEnter Number of vertices : ");
scanf("%d", &n);
printf("\nEnter the cost in the Adjacency Matrix : \n");
for(i = 1 ; i <= n ; i++)
{
for(j = 1 ; j <= n ; j++)
{
scanf("%d", &adj[i][j]);
if(adj[i][j] == 0)
adj[i][j] = MAX;
}
}
printf("\nThe edges of the Minimum Cost Spanning Tree are : \n");
Find_Kruskal();
}
